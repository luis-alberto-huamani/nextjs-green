{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"/media/felix/projects/green/components/perfil2/countDown.jsx\";\nimport React from 'react';\n\nvar CountDown =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CountDown, _React$Component);\n\n  function CountDown() {\n    var _this;\n\n    _classCallCheck(this, CountDown);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CountDown).call(this));\n    _this.state = {\n      countDown: null\n    };\n    return _this;\n  }\n\n  _createClass(CountDown, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var countDownDate = new Date(\"Aug 15, 2019 16:00:00\").getTime();\n      this.countDown = setInterval(function () {\n        var now = new Date().getTime();\n        var distance = countDownDate - now;\n        var days = Math.floor(distance / (1000 * 60 * 60 * 24));\n        var hours = Math.floor(distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n        var minutes = Math.floor(distance % (1000 * 60 * 60) / (1000 * 60));\n        var seconds = Math.floor(distance % (1000 * 60) / 1000);\n\n        _this2.setState({\n          countDown: \"\".concat(days, \" d \").concat(hours, \" h \").concat(minutes, \" m \").concat(seconds, \" s\")\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.countDown);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, this.state.countDown);\n    }\n  }]);\n\n  return CountDown;\n}(React.Component);\n\n;\nexport default CountDown;","map":{"version":3,"sources":["/media/felix/projects/green/components/perfil2/countDown.jsx"],"names":["React","CountDown","state","countDown","countDownDate","Date","getTime","setInterval","now","distance","days","Math","floor","hours","minutes","seconds","setState","clearInterval","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;AACJ,uBAAa;AAAA;;AAAA;;AACX;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE;AADA,KAAb;AAFW;AAKZ;;;;wCAEmB;AAAA;;AAClB,UAAMC,aAAa,GAAG,IAAIC,IAAJ,CAAS,uBAAT,EAAkCC,OAAlC,EAAtB;AACA,WAAKH,SAAL,GAAiBI,WAAW,CAAC,YAAI;AAC/B,YAAMC,GAAG,GAAG,IAAIH,IAAJ,GAAWC,OAAX,EAAZ;AACA,YAAMG,QAAQ,GAAGL,aAAa,GAAGI,GAAjC;AACA,YAAME,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAnB,CAAb;AACA,YAAMI,KAAK,GAAGF,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAArB,CAAT,IAAsC,OAAO,EAAP,GAAY,EAAlD,CAAX,CAAd;AACA,YAAMK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAP,GAAY,EAAhB,CAAT,IAAiC,OAAO,EAAxC,CAAX,CAAhB;AACA,YAAMM,OAAO,GAAGJ,IAAI,CAACC,KAAL,CAAYH,QAAQ,IAAI,OAAO,EAAX,CAAT,GAA2B,IAAtC,CAAhB;;AACA,QAAA,MAAI,CAACO,QAAL,CAAc;AAAEb,UAAAA,SAAS,YAAKO,IAAL,gBAAeG,KAAf,gBAA0BC,OAA1B,gBAAuCC,OAAvC;AAAX,SAAd;AACD,OAR2B,EAQzB,IARyB,CAA5B;AASD;;;2CAEsB;AACrBE,MAAAA,aAAa,CAAC,KAAKd,SAAN,CAAb;AACD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAO,KAAKD,KAAL,CAAWC,SAAlB,CADF;AAGD;;;;EA7BqBH,KAAK,CAACkB,S;;AA8B7B;AAED,eAAejB,SAAf","sourcesContent":["import React from 'react';\n\nclass CountDown extends React.Component{\n  constructor(){\n    super();\n    this.state = {\n      countDown: null,\n    }\n  }\n\n  componentDidMount() {\n    const countDownDate = new Date(\"Aug 15, 2019 16:00:00\").getTime();\n    this.countDown = setInterval(()=>{\n      const now = new Date().getTime();\n      const distance = countDownDate - now;\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n      this.setState({ countDown: `${days} d ${hours} h ${minutes} m ${seconds} s` })\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.countDown);\n  }\n\n  render() {\n    return(\n      <span>{this.state.countDown}</span>\n    )\n  }\n};\n\nexport default CountDown;"]},"metadata":{},"sourceType":"module"}