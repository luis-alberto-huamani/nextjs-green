{"version":3,"file":"static/webpack/static/development/pages/login.js.e7fba9cb6ed3327b100f.hot-update.js","sources":["webpack:///./components/login/login.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport './login.scss';\nimport { Button, Popover } from 'reactstrap';\nimport Logo from '../logo-2/logo';\nimport { validateEmail, validateEmpty } from '../../utils/functions';\nimport Fail from './fail';\nimport Spinner from '../spinner/spinner';\nimport Router from 'next/router';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { onUser, userAction } from '../../store/actions';\n\nclass Login extends Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      login: true,\n      mail: '',\n      mailLabel: false,\n      mailPop: false,\n      pass: '',\n      passLabel: false,\n      passPop: false,\n      spinner: false,\n      fail: false,\n    }\n    this.onChange = this.onChange.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({ [e.target.id]: e.target.value });\n  }\n\n  onFocus(e) {\n    const label = `${e.target.id}Label`;\n    const pop = `${e.target.id}Pop`;\n    this.setState({ [label]: true, [pop]: false  });\n  }\n\n  onBlur(e) {\n    const label = `${e.target.id}Label`;\n    this.setState({ [label]: false });\n  }\n\n  onSubmit(e) {\n    const { mail, pass } = this.state;\n    e.preventDefault();\n    if (!validateEmail(mail)) {\n      this.setState({ mailPop: true });\n    } else if (!validateEmpty(pass)) {\n      this.setState({ passPop: true });\n    } else {\n      this.setState({ spinner: true, login: false })\n      const data = {\n        mail: mail,\n        pass: pass,\n      }\n      console.log(data);\n      fetch('http://localhost:4000/api/login.js', {\n        headers: { \"Content-Type\": \"application/json\" },\n        method: \"POST\",\n        body: JSON.stringify(data),\n      })\n        .then(res => {\n          if (res.status === 201) {\n            this.setState({ spinner: false, login: true });\n            res.json()\n              .then(resp => {\n                console.log(resp);\n                onUser({\n                  action: userAction.LOG_IN,\n                  data: resp,\n                });\n                Router.push(`/perfil`);\n              })\n          } else {\n              this.setState({ fail: true, login: false, spinner: false });\n              setTimeout(() => {\n                this.setState({ login: true, fail: false });\n              }, 3000)\n            }\n        })\n        .catch(err => console.log(err));\n    }\n  }\n\n  render() {\n    const {\n      login,\n      mail,\n      mailLabel,\n      mailPop,\n      pass,\n      passLabel,\n      passPop,\n      spinner,\n      fail,\n    } = this.state;\n    return(\n      <section className=\"login_main_cont animated fadeIn\">\n        {\n          login && (\n            <div className=\"form_cont\">\n              <div className=\"form_header\">\n                <Logo color=\"#669f09\" logoWidth=\"30px\" fontSize=\"1.2rem\" />\n              </div>\n              <form method='POST' className=\"form_login\" onSubmit={this.onSubmit}>\n                <div className=\"input_cont\" style={mailPop ? { borderBottomColor: '#ff6c1a'} : {borderBottomColor: \"#669f09\"}}>\n                  <label htmlFor=\"mail\" style={ mailLabel ? {color: '#8bb940', background: '#fff'} : {color: 'transparent', background: 'transparent'}}>mail</label>\n                  <input\n                    id=\"mail\"\n                    name=\"mail\"\n                    type=\"text\"\n                    className=\"green_input\"\n                    placeholder=\"Correo electronico\"\n                    value={mail}\n                    onChange={this.onChange}\n                    onFocus={this.onFocus}\n                    onBlur={this.onBlur}\n                  />\n                  <Popover className=\"popMsg\" placement=\"right\" target=\"mail\" isOpen={mailPop}>\n                    <p>La direccion de correo no es valida</p>\n                  </Popover>\n                </div>\n                <div className=\"input_cont\" style={passPop ? { borderBottomColor: '#ff6c1a'} : {borderBottomColor: \"#669f09\"}}>\n                  <label htmlFor=\"pass\" style={ passLabel ? {color: '#8bb940', background: '#fff'} : {color: 'transparent', background: 'transparent'} }>pass</label>\n                  <input\n                    id=\"pass\"\n                    name=\"pass\"\n                    type=\"password\"\n                    className=\"green_input\"\n                    placeholder=\"Contraseña\"\n                    value={pass}\n                    onChange={this.onChange}\n                    onFocus={this.onFocus}\n                    onBlur={this.onBlur}\n                  />\n                  <Popover className=\"popMsg\" placement=\"right\" target=\"pass\" isOpen={passPop}>\n                    <p>La contraseña no es valida</p>\n                  </Popover>\n                </div>\n                <Button type=\"submit\">entrar</Button>\n              </form>\n          </div>\n          )\n        }\n        {\n          fail && <Fail className=\"animated fadeInDown\" text=\"Correo o contraseña invalido\" />\n        }\n        {\n          spinner && <Spinner />\n        }\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = dispatch => bindActionCreators({ onUser }, dispatch);\n\nexport default connect(null, mapStateToProps)(Login);\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAhBA;AAiBA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAjJA;AACA;AAmJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}